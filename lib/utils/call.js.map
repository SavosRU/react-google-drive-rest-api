{"version":3,"sources":["../../src/utils/call.es6"],"names":["auth","axios","handleResponse","API_DOMAIN","call","method","resource","header","params","body","success_callback","fail_callback","options","isInited","console","warn","Promise","resolve","getAccessToken","then","response","isSuccess","callAPI","data","access_token","Error","catch","err","error","domain","noDefaultQueryParams","noDefaultDomain","defaultHeader","tempHeader","Object","assign","tempParams","key","getServerClientId","request","baseURL","headers","url","validateStatus","status","responseType","timeout"],"mappings":";AACA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA;;;AAGA,eAAe,SAASC,IAAT,CAAcC,MAAd,EAAsBC,QAAtB,EAAgCC,MAAhC,EAAwCC,MAAxC,EAAgDC,IAAhD,EAAsDC,gBAAtD,EAAwEC,aAAxE,EAAuFC,OAAvF,EAAgG;AAC7G,MAAI,CAACZ,KAAKa,QAAV,EAAoB;AAClBC,YAAQC,IAAR,CAAa,gCAAb;AACA;AACD;AACD,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9BjB,SAAKkB,cAAL,GACGC,IADH,CACSC,QAAD,IAAc;AAClB,UAAIA,SAASC,SAAb,EACE,OAAOC,QAAQjB,MAAR,EAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,MAAlC,EAA0CC,IAA1C,EAAgDC,gBAAhD,EAAkEC,aAAlE,EAAiFC,OAAjF,EAA0FQ,SAASG,IAAT,CAAcC,YAAxG,CAAP,CADF,KAEK,MAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACN,KALH,EAMGN,IANH,CAMSC,QAAD,IAAc;AAClB,UAAIA,SAASC,SAAb,EAAwBJ,QAAQG,QAAR,EAAxB,KACK,MAAM,IAAIK,KAAJ,CAAU,sCAAsCnB,QAAhD,CAAN;AACN,KATH,EAUGoB,KAVH,CAUSC,OAAO;AACZb,cAAQc,KAAR,CAAcD,GAAd;AACD,KAZH;AAaD,GAdM,CAAP;AAgBD;;AAID;;;;AAIA;;;;;;;;;;;AAYA,SAASL,OAAT,CAAiBjB,MAAjB,EAAyBC,QAAzB,EAAmCC,MAAnC,EAA2CC,MAA3C,EAAmDC,IAAnD,EAAyDC,gBAAzD,EAA2EC,aAA3E,EAA0FC,UAAU,EAAEiB,QAAQ,IAAV,EAAgBC,sBAAsB,KAAtC,EAA6CC,iBAAiB,KAA9D,EAApG,EAA2KP,YAA3K,EAAyL;;AAEvL,MAAIQ,gBAAgB;AAClB,oBAAgB,kBADE;AAElB,qBAAiB,YAAYR;AAFX,GAApB;;AAMA,MAAIS,aAAaC,OAAOC,MAAP,CAAc,EAAd,EAAkBH,aAAlB,EAAiCzB,MAAjC,CAAjB;AACA,MAAI6B,aAAaF,OAAOC,MAAP,CAAc,EAAd,EAAkBvB,QAAQkB,oBAAR,GAA+B,EAA/B,GAAoC,EAAEO,KAAKrC,KAAKsC,iBAAL,EAAP,EAAtD,EAAyF9B,MAAzF,CAAjB;;AAEA,SAAOP,MAAMsC,OAAN,CAAc;AACnBC,aAAS5B,QAAQiB,MAAR,IAAkBjB,QAAQmB,eAA1B,GAA4CnB,QAAQiB,MAApD,GAA6D1B,UADnD;AAEnBsC,aAASR,UAFU;AAGnB5B,YAAQA,MAHW;AAInBG,YAAQ4B,UAJW;AAKnBM,SAAKpC,QALc;AAMnBiB,UAAMd,IANa;AAOnBkC,oBAAgB,UAAUC,MAAV,EAAkB;AAChC,aAAO,IAAP;AACD,KATkB;AAUnBC,kBAAcjC,QAAQiC,YAVH;AAWnBC,aAAS;AAXU,GAAd,EAaJ3B,IAbI,CAcHC,YAAY;AACV,WAAO;AACLC,iBAAWnB,eAAekB,QAAf,EAAyBV,gBAAzB,EAA2CC,aAA3C,CADN;AAELiC,cAAQxB,SAASwB,MAFZ;AAGLrB,YAAMH,SAASG,IAHV;AAILH,gBAAUA,QAJL;AAKLb,cAAQa,SAASqB;AALZ,KAAP;AAOD,GAtBE,EAuBJf,KAvBI,CAuBEC,OAAOb,QAAQc,KAAR,CAAc,gDAAgDtB,QAAhD,GAA2D,IAAzE,EAA+EqB,GAA/E,CAvBT,CAAP;AAwBD","file":"call.js","sourcesContent":["\nimport auth from '../auth';\nimport axios from 'axios';\nimport { handleResponse } from './utils.es6';\nimport { API_DOMAIN } from '../config.es6';\n/**\n * For easier way to call api \n */\nexport default function call(method, resource, header, params, body, success_callback, fail_callback, options) {\n  if (!auth.isInited) {\n    console.warn('you should init your auth info')\n    return;\n  }\n  return new Promise((resolve) => {\n    auth.getAccessToken()\n      .then((response) => {\n        if (response.isSuccess)\n          return callAPI(method, resource, header, params, body, success_callback, fail_callback, options, response.data.access_token);\n        else throw new Error('Cannot get an access token for Drive API')\n      })\n      .then((response) => {\n        if (response.isSuccess) resolve(response);\n        else throw new Error('Calling Google Drive API failed: ' + resource);\n      })\n      .catch(err => {\n        console.error(err);\n      })\n  }\n  )\n}\n\n\n\n/** =================================================================\n  *                    HTTP Resquest Function\n  *  =================================================================*/\n\n/**\n * Pure function to call Drive API (without Authorization step)\n * \n * Params may need to notice here:\n * @param {Object} options ==>  vaild props:\n *        1. domain: customize domain if you dont want use a new domain\n *        2. noDefaultQueryParams: clear all default query params in your request\n *        3. noDefaultDomain: clear default domain, but not require a new domain(this prop is useful when you just want to set 'url' and ignore 'domain' in axios)\n *        4. responseType: define the response data type; default is application/json\n */\n\n\nfunction callAPI(method, resource, header, params, body, success_callback, fail_callback, options = { domain: null, noDefaultQueryParams: false, noDefaultDomain: false }, access_token) {\n\n  let defaultHeader = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + access_token\n  }\n\n\n  let tempHeader = Object.assign({}, defaultHeader, header)\n  let tempParams = Object.assign({}, options.noDefaultQueryParams ? {} : { key: auth.getServerClientId() }, params)\n\n  return axios.request({\n    baseURL: options.domain || options.noDefaultDomain ? options.domain : API_DOMAIN,\n    headers: tempHeader,\n    method: method,\n    params: tempParams,\n    url: resource,\n    data: body,\n    validateStatus: function (status) {\n      return true;\n    },\n    responseType: options.responseType,\n    timeout: 60000\n  })\n    .then(\n      response => {\n        return {\n          isSuccess: handleResponse(response, success_callback, fail_callback),\n          status: response.status,\n          data: response.data,\n          response: response,\n          header: response.headers\n        }\n      })\n    .catch(err => console.error('Error occur when calling Google Drive API: ' + resource + '/n', err))\n}\n"]}