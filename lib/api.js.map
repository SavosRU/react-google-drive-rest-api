{"version":3,"sources":["../src/api.es6"],"names":["GoogleDriveAPI","query_params","success_callback","fail_callback","temp_params","Object","assign","fields","fileId","name","type","status","data","console","error","domain","API_DOMAIN_UPLOAD","uri","file","noDefaultQueryParams","noDefaultDomain","header","body","_initResumableSession","then","response","isSuccess","_sendFileViaResumableSessionURI","location","mimeType","responseType"],"mappings":"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","file":"api.js","sourcesContent":["import {API_DOMAIN_UPLOAD} from './config';\nimport call from './utils/call';\nexport default class GoogleDriveAPI {\n\n  /** =================================================================\n   *                    Google Drive Rest API\n   *  =================================================================*/\n\n  /**\n   * Google API calling functions, basic paramters are:\n   *  1. path params (if needed): String\n   *  2. query params (if needed): Object\n   *  3. body (if needed): Object\n   *  4. customized params (if needed): Any\n   *  5. success/fail callback: Function\n   * \n   * More details refer to: https://developers.google.com/drive/v3/reference/\n   */\n\n  static getAbout(query_params, success_callback, fail_callback) {\n    //let default_query_params = { fields: 'user' }\n    let temp_params = Object.assign({}, { fields: 'user' }, query_params)\n    return call('get', '/about', null, temp_params, null, success_callback, fail_callback);\n  }\n\n  static getStorage(query_params, success_callback, fail_callback) {\n    //let default_query_params = { fields: 'user' }\n    let temp_params = Object.assign({}, { fields: 'storageQuota' }, query_params)\n    return call('get', '/about', null, temp_params, null, success_callback, fail_callback);\n  }\n\n  static listFile(query_params, success_callback, fail_callback) {\n    return call('get', 'files', null, query_params, null, success_callback, fail_callback);\n  }\n\n  /**\n   * Gets a file's metadata or content by ID\n   */\n  static getFile(fileId) {  \n    return call('get', 'files/' + fileId +'?fields=size', null, null, null, null, null);\n  }\n\n  /**\n   * Initiating a upload session for Resumable Upload\n   * \n   * More details refer to: https://developers.google.com/drive/v3/web/resumable-upload\n   */\n  static _initResumableSession(name, type) {\n    return call('post', 'files', { 'Content-Type': 'application/json; charset=UTF-8' },\n      { 'uploadType': 'resumable' }, // query\n      { 'name': name, 'mimeType': type }, //body\n      null,\n      (status, data) => { console.error('failed in init resumable session') },// fail callback \n      { domain: API_DOMAIN_UPLOAD }\n    );\n  }\n\n  static _sendFileViaResumableSessionURI(uri, file) {\n    return call('put', uri, null, null, file, null, null, { domain: null, noDefaultQueryParams: true, noDefaultDomain: true });\n  }\n\n  static _continueSendFileViaResumableSessionURI(uri, file) {\n    return call('put', uri, null, null, file, null, null, { domain: null, noDefaultQueryParams: true, noDefaultDomain: true });\n  }\n\n  static importFileSimple(header, query_params, body, success_callback, fail_callback) {\n    return call('post', '', header, query_params, body, success_callback, fail_callback, { domain: API_DOMAIN_UPLOAD });\n  }\n\n  // TODO\n  static importFileMultipart() {\n\n  }\n\n  static importFileResumable(file, name, type) {\n    return this._initResumableSession(name, type)\n      .then((response) => {\n        //console.log('initResumableSession response:', response)\n        if (response.isSuccess) {\n          return this._sendFileViaResumableSessionURI(response.header.location, file);\n        }\n      })\n  }\n\n  static exportFile(fileId, mimeType, success_callback, fail_callback) {\n    //if(!mimeType) mimeType = 'text/html';\n    return call('get', 'files/' + fileId + '/export', null, { mimeType: mimeType }, null, success_callback, fail_callback, {responseType:'arraybuffer'})\n  }\n\n  static deleteFile(fileId, success_callback, fail_callback) {\n    return call('delete', 'files/' + fileId, null, null, null, success_callback, fail_callback);\n  }\n\n  static emptyTrash(success_callback, fail_callback) {\n    return call('delete', 'files/trash', null, null, null, success_callback, fail_callback);\n  }\n\n\n  \n}"]}